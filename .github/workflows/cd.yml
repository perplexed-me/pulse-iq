name: CD Deploy All Services to Docker Hub & Azure

on:
  workflow_run:
    workflows: ["CI Build & Test All Services"]
    types: [completed]
    branches: [main]

jobs:
  build-and-push-all:
    if: github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # ================================
      # Extract metadata for all services
      # ================================
      - name: Extract metadata for user-appointment-service
        id: meta-user-appointment
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/pulseiq-user-appointment
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Extract metadata for payment-service
        id: meta-payment-service
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/pulseiq-payment-service
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Extract metadata for ai-service
        id: meta-ai-service
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/pulseiq-ai-service
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Extract metadata for frontend
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/pulseiq-frontend
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      # ================================
      # Build and push all service images
      # ================================
      - name: Build and push user-appointment-service image
        uses: docker/build-push-action@v5
        with:
          context: ./user-appointment-service
          file: ./user-appointment-service/Dockerfile
          push: true
          tags: ${{ steps.meta-user-appointment.outputs.tags }}
          labels: ${{ steps.meta-user-appointment.outputs.labels }}
          cache-from: type=gha,scope=user-appointment
          cache-to: type=gha,mode=max,scope=user-appointment
          platforms: linux/amd64

      - name: Build and push payment-service image
        uses: docker/build-push-action@v5
        with:
          context: ./payment-service
          file: ./payment-service/Dockerfile
          push: true
          tags: ${{ steps.meta-payment-service.outputs.tags }}
          labels: ${{ steps.meta-payment-service.outputs.labels }}
          cache-from: type=gha,scope=payment-service
          cache-to: type=gha,mode=max,scope=payment-service
          platforms: linux/amd64

      - name: Build and push ai-service image
        uses: docker/build-push-action@v5
        with:
          context: ./ai-service
          file: ./ai-service/Dockerfile
          push: true
          tags: ${{ steps.meta-ai-service.outputs.tags }}
          labels: ${{ steps.meta-ai-service.outputs.labels }}
          cache-from: type=gha,scope=ai-service
          cache-to: type=gha,mode=max,scope=ai-service
          platforms: linux/amd64

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha,scope=frontend
          cache-to: type=gha,mode=max,scope=frontend
          platforms: linux/amd64
          build-args: |
            VITE_USER_APPOINTMENT_API_URL=http://${{ secrets.PUBLIC_IP }}:8085
            VITE_PAYMENT_API_URL=http://${{ secrets.PUBLIC_IP }}:8082
            VITE_AI_SERVICE_API_URL=http://${{ secrets.PUBLIC_IP }}:8000
            VITE_FIREBASE_API_KEY=${{ secrets.VITE_FIREBASE_API_KEY }}
            VITE_FIREBASE_AUTH_DOMAIN=${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}
            VITE_FIREBASE_PROJECT_ID=${{ secrets.VITE_FIREBASE_PROJECT_ID }}
            VITE_FIREBASE_STORAGE_BUCKET=${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}
            VITE_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}
            VITE_FIREBASE_APP_ID=${{ secrets.VITE_FIREBASE_APP_ID }}
            VITE_FIREBASE_MEASUREMENT_ID=${{ secrets.VITE_FIREBASE_MEASUREMENT_ID }}

  deploy-to-azure:
    needs: build-and-push-all
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Copy deployment files to Azure VM
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.AZURE_SSH_HOST }}
          username: ${{ secrets.AZURE_SSH_USER }}
          key: ${{ secrets.AZURE_SSH_PRIVATE_KEY }}
          source: "user-appointment-service/init-schema.sql"
          target: "~/pulseiq-app/"
          strip_components: 0

      - name: Deploy to Azure VM
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.AZURE_SSH_HOST }}
          username: ${{ secrets.AZURE_SSH_USER }}
          key: ${{ secrets.AZURE_SSH_PRIVATE_KEY }}
          script: |
            set -e

            # Create application directory
            mkdir -p ~/pulseiq-app
            cd ~/pulseiq-app

            # Create environment file for production
            echo "Creating environment file..."
            echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" > .env.azure
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env.azure
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env.azure
            echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env.azure
            echo "PUBLIC_IP=${{ secrets.PUBLIC_IP }}" >> .env.azure
            echo "FRONTEND_URL=http://${{ secrets.PUBLIC_IP }}:8080" >> .env.azure
            
            # Email configuration
            echo "MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}" >> .env.azure
            echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> .env.azure
            
            # SSLCommerz configuration
            echo "SSLCOMMERZ_STORE_ID=${{ secrets.SSLCOMMERZ_STORE_ID }}" >> .env.azure
            echo "SSLCOMMERZ_STORE_PASSWORD=${{ secrets.SSLCOMMERZ_STORE_PASSWORD }}" >> .env.azure

            # Export variables to current shell session
            set -a && source .env.azure && set +a

            # Create Firebase service account file
            echo "Creating Firebase service account file..."
            echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT_JSON }}' > firebase-service-account.json

            # Pull latest images
            echo "=== Pulling Latest Images ==="
            docker pull ${DOCKER_USERNAME}/pulseiq-user-appointment:latest
            docker pull ${DOCKER_USERNAME}/pulseiq-payment-service:latest
            docker pull ${DOCKER_USERNAME}/pulseiq-ai-service:latest
            docker pull ${DOCKER_USERNAME}/pulseiq-frontend:latest
            docker pull postgres:15-alpine

            # Stop and remove existing containers
            echo "=== Stopping Existing Containers ==="
            docker stop pulseiq_postgres pulseiq_user_appointment pulseiq_payment_service pulseiq_ai_service pulseiq_frontend 2>/dev/null || true
            docker rm pulseiq_postgres pulseiq_user_appointment pulseiq_payment_service pulseiq_ai_service pulseiq_frontend 2>/dev/null || true

            # Clean up old networks
            docker network rm pulseiq-network 2>/dev/null || true

            # Create Docker network
            echo "Creating Docker network..."
            docker network create pulseiq-network

            # Start database
            echo "Starting PostgreSQL database..."

            # Check if volume exists and has data
            if docker volume inspect pulseiq_postgres_data >/dev/null 2>&1; then
              PGDATA_PATH=$(docker volume inspect pulseiq_postgres_data -f '{{ .Mountpoint }}' 2>/dev/null || echo "")
              if [ -n "$PGDATA_PATH" ] && [ -f "$PGDATA_PATH/PG_VERSION" ]; then
                echo "Existing volume with data detected – skipping init schema"
                docker run -d \
                  --name pulseiq_postgres \
                  --network pulseiq-network \
                  --restart unless-stopped \
                  -e POSTGRES_DB=pulseiq_db \
                  -e POSTGRES_USER=pulseiq_user \
                  -e POSTGRES_PASSWORD=${DB_PASSWORD} \
                  -v pulseiq_postgres_data:/var/lib/postgresql/data \
                  -p 5432:5432 \
                  postgres:15-alpine
              else
                echo "Volume exists but no data – mounting init-schema.sql"
                docker run -d \
                  --name pulseiq_postgres \
                  --network pulseiq-network \
                  --restart unless-stopped \
                  -e POSTGRES_DB=pulseiq_db \
                  -e POSTGRES_USER=pulseiq_user \
                  -e POSTGRES_PASSWORD=${DB_PASSWORD} \
                  -e POSTGRES_INITDB_ARGS="--encoding=UTF-8 --lc-collate=C --lc-ctype=C" \
                  -v "$(pwd)/user-appointment-service/init-schema.sql:/docker-entrypoint-initdb.d/01_init.sql:ro" \
                  -v pulseiq_postgres_data:/var/lib/postgresql/data \
                  -p 5432:5432 \
                  postgres:15-alpine
              fi
            else
              echo "Fresh volume – mounting init-schema.sql"
              docker run -d \
                --name pulseiq_postgres \
                --network pulseiq-network \
                --restart unless-stopped \
                -e POSTGRES_DB=pulseiq_db \
                -e POSTGRES_USER=pulseiq_user \
                -e POSTGRES_PASSWORD=${DB_PASSWORD} \
                -e POSTGRES_INITDB_ARGS="--encoding=UTF-8 --lc-collate=C --lc-ctype=C" \
                -v "$(pwd)/user-appointment-service/init-schema.sql:/docker-entrypoint-initdb.d/01_init.sql:ro" \
                -v pulseiq_postgres_data:/var/lib/postgresql/data \
                -p 5432:5432 \
                postgres:15-alpine
            fi

            # Wait for database
            echo "Waiting 20 seconds for database..."
            sleep 20

            # Start user appointment service
            echo "Starting User Appointment service..."
            docker run -d \
              --name pulseiq_user_appointment \
              --network pulseiq-network \
              --restart unless-stopped \
              -e SPRING_DATASOURCE_URL=jdbc:postgresql://pulseiq_postgres:5432/pulseiq_db \
              -e SPRING_DATASOURCE_USERNAME=pulseiq_user \
              -e SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD} \
              -e JWT_SECRET=${JWT_SECRET} \
              -e FRONTEND_ORIGIN=${FRONTEND_URL} \
              -e FIREBASE_ENABLED=true \
              -e SPRING_JPA_HIBERNATE_DDL_AUTO=update \
              -e SPRING_JPA_PROPERTIES_HIBERNATE_DEFAULT_SCHEMA=pulseiq \
              -e MAIL_USERNAME=${MAIL_USERNAME} \
              -e MAIL_PASSWORD=${MAIL_PASSWORD} \
              -v $(pwd)/firebase-service-account.json:/app/firebase-service-account.json:ro \
              -p 8085:8085 \
              ${DOCKER_USERNAME}/pulseiq-user-appointment:latest

            # Start payment service
            echo "Starting Payment service..."
            docker run -d \
              --name pulseiq_payment_service \
              --network pulseiq-network \
              --restart unless-stopped \
              -e SPRING_DATASOURCE_URL=jdbc:postgresql://pulseiq_postgres:5432/pulseiq_db \
              -e SPRING_DATASOURCE_USERNAME=pulseiq_user \
              -e SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD} \
              -e JWT_SECRET=${JWT_SECRET} \
              -e FRONTEND_ORIGIN=${FRONTEND_URL} \
              -e SPRING_JPA_HIBERNATE_DDL_AUTO=update \
              -e SPRING_JPA_PROPERTIES_HIBERNATE_DEFAULT_SCHEMA=pulseiq \
              -e MAIL_USERNAME=${MAIL_USERNAME} \
              -e MAIL_PASSWORD=${MAIL_PASSWORD} \
              -e SSLCOMMERZ_STORE_ID=${SSLCOMMERZ_STORE_ID} \
              -e SSLCOMMERZ_STORE_PASSWORD=${SSLCOMMERZ_STORE_PASSWORD} \
              -p 8082:8082 \
              ${DOCKER_USERNAME}/pulseiq-payment-service:latest

            # Start AI service
            echo "Starting AI service..."
            docker run -d \
              --name pulseiq_ai_service \
              --network pulseiq-network \
              --restart unless-stopped \
              -e OPENAI_API_KEY=${OPENAI_API_KEY} \
              -p 8000:8000 \
              ${DOCKER_USERNAME}/pulseiq-ai-service:latest

            # Start frontend with aggressive cache busting
            echo "Starting Frontend..."
            docker images --format "{{.Repository}}:{{.Tag}}" | grep ${DOCKER_USERNAME}/pulseiq-frontend | xargs -r docker rmi -f 2>/dev/null || true
            docker pull ${DOCKER_USERNAME}/pulseiq-frontend:latest
            docker run -d \
              --pull always \
              --name pulseiq_frontend \
              --network pulseiq-network \
              --restart unless-stopped \
              -p 8080:80 \
              ${DOCKER_USERNAME}/pulseiq-frontend:latest

            # Quick status check
            echo "=== Deployment Complete ==="
            echo "🌐 Frontend: http://${{ secrets.PUBLIC_IP }}:8080"
            echo "🏥 User Service: http://${{ secrets.PUBLIC_IP }}:8085"
            echo "💳 Payment Service: http://${{ secrets.PUBLIC_IP }}:8082"
            echo "🤖 AI Service: http://${{ secrets.PUBLIC_IP }}:8000"
            echo ""
            echo "Container Status:"
            docker ps --filter network=pulseiq-network --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
