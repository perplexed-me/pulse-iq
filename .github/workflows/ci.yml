name: CI Build & Test All Services

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: "20"
  JAVA_VERSION: "21"
  PYTHON_VERSION: "3.11"

jobs:
  # Test Frontend Service
  test-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Update npm to latest version
        run: npm install -g npm@latest

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: |
          echo "Node.js version: $(node --version)"
          echo "npm version: $(npm --version)"

          # Check if package-lock.json exists and is valid
          if [ -f "package-lock.json" ]; then
            echo "package-lock.json found, attempting npm ci"
            npm ci
          else
            echo "package-lock.json not found, using npm install"
            npm install
          fi

      - name: Run ESLint
        run: npm run lint

      - name: Build frontend
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/
          retention-days: 1

  # Test User Appointment Service (Java Spring Boot)
  test-user-appointment-service:
    runs-on: ubuntu-latest

    # Add PostgreSQL service for testing
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: pulseiq_db_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    env:
      # Use local test database
      SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/pulseiq_db_test?currentSchema=pulseiq
      SPRING_DATASOURCE_USERNAME: test_user
      SPRING_DATASOURCE_PASSWORD: test_password
      JWT_SECRET: test_jwt_secret_for_ci_only_minimum_32_characters_long_enough

    defaults:
      run:
        working-directory: user-appointment-service

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('user-appointment-service/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U test_user; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Create test schema
        run: |
          PGPASSWORD=test_password psql -h localhost -p 5432 -U test_user -d pulseiq_db_test -c "CREATE SCHEMA IF NOT EXISTS pulseiq;"

      - name: Setup Maven wrapper
        run: |
          chmod +x ./setup-maven.sh
          ./setup-maven.sh

      - name: Build & test with Maven (FAST)
        run: |
          # Set test profile explicitly  
          export SPRING_PROFILES_ACTIVE=test
          # Use Maven wrapper if available, otherwise system Maven
          if [ -f "./mvnw" ] && [ -x "./mvnw" ] && [ -f ".mvn/wrapper/maven-wrapper.properties" ]; then
            echo "Using Maven wrapper"
            ./mvnw clean compile -B --quiet -Dspring.profiles.active=test
            ./mvnw test -B --quiet -Dspring.profiles.active=test
          else
            echo "Using system Maven"
            mvn clean compile -B --quiet -Dspring.profiles.active=test
            mvn test -B --quiet -Dspring.profiles.active=test
          fi

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: user-appointment-test-results
          path: user-appointment-service/target/surefire-reports/
          retention-days: 1

  # Test AI Service (Python FastAPI)
  test-ai-service:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ai-service

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"
          cache-dependency-path: ai-service/requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio httpx

      - name: Run Python linting (flake8)
        run: |
          pip install flake8
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Test AI Service
        env:
          OPENAI_API_KEY: test_key_for_ci
        run: |
          # Basic import test
          python -c "import main; print('AI Service imports successfully')"

          # If you have pytest tests, uncomment below:
          # pytest tests/ -v

      - name: Upload test coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ai-service-coverage
          path: ai-service/htmlcov/
          retention-days: 1

  # Integration Test - Simple Docker Build & Container Test
  integration-test:
    runs-on: ubuntu-latest
    needs: [test-frontend, test-user-appointment-service, test-ai-service]
    # Run integration test on pushes to main/develop and pull requests
    if: always() && (needs.test-frontend.result == 'success' && needs.test-user-appointment-service.result == 'success' && needs.test-ai-service.result == 'success')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('user-appointment-service/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install Docker Compose
        run: |
          # Install Docker Compose v2 using direct download (most reliable for CI)
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

          # Verify installation
          docker-compose --version

          # Also check if docker compose (v2 plugin) works
          docker compose version || echo "Docker compose plugin not available, using standalone binary"

      - name: Set up Node.js for frontend build
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Verify build environment
        run: |
          echo "=== Build Environment Check ==="
          echo "✅ Repository checked out successfully"
          echo "✅ package-lock.json available: $(ls -la frontend/package-lock.json)"
          echo "✅ Ready for Docker builds"

      - name: Create test environment file
        run: |
          cp .env.test .env

      - name: Build all service images
        run: |
          # Set environment for builds
          export JWT_SECRET="test_jwt_secret_for_ci_only_minimum_32_characters_long_enough"

          # Build user appointment service JAR first
          cd user-appointment-service

          # Setup Maven wrapper
          chmod +x ./setup-maven.sh
          ./setup-maven.sh

          # Build with Maven (wrapper or system)
          if [ -f "./mvnw" ] && [ -x "./mvnw" ] && [ -f ".mvn/wrapper/maven-wrapper.properties" ]; then
            echo "Using Maven wrapper for JAR build"
            ./mvnw clean package -DskipTests -B -Dspring.profiles.active=test
          else
            echo "Using system Maven for JAR build"
            mvn clean package -DskipTests -B -Dspring.profiles.active=test
          fi

          cd ..

          # Build user appointment service Docker image
          echo "Building user appointment service Docker image..."
          docker build -t test/pulseiq-user-appointment:latest ./user-appointment-service

          # Build AI service
          echo "Building AI service Docker image..."
          docker build -t test/pulseiq-ai-service:latest ./ai-service

          # Build frontend with proper Docker context
          echo "Building frontend Docker image..."
          (
            cd frontend
            echo "Now in frontend directory: $(pwd)"
            echo "Verifying Docker build context:"
            ls -la package-lock.json package.json Dockerfile
            
            docker build -t test/pulseiq-frontend:latest \
              --build-arg VITE_USER_APPOINTMENT_API_URL=http://localhost:8085 \
              --build-arg VITE_AI_SERVICE_API_URL=http://localhost:8000 \
              --build-arg VITE_FIREBASE_API_KEY=test_api_key \
              --build-arg VITE_FIREBASE_AUTH_DOMAIN=test.firebaseapp.com \
              --build-arg VITE_FIREBASE_PROJECT_ID=test-project \
              --build-arg VITE_FIREBASE_STORAGE_BUCKET=test-project.appspot.com \
              --build-arg VITE_FIREBASE_MESSAGING_SENDER_ID=123456789 \
              --build-arg VITE_FIREBASE_APP_ID=1:123456789:web:abcdef123456 \
              --build-arg VITE_FIREBASE_MEASUREMENT_ID=G-ABCDEF1234 \
              .
          )

      - name: Simple integration test
        run: |
          echo "=== Simple Docker Build & Start Test ==="

          # Create firebase service account mock file
          echo '{"project_id": "test"}' > firebase-service-account.json

          # Start services
          echo "Starting services..."
          docker-compose -f docker-compose.test.yml up -d db user-appointment-service ai-service

          # Wait a bit for services to start
          echo "Waiting 60 seconds for services to initialize..."
          sleep 60

          # Check if containers are running
          echo "=== Container Status ==="
          docker ps --filter "name=pulseiq"

          # Show logs for debugging
          echo "=== Service Logs ==="
          echo "Database logs:"
          docker logs pulseiq_postgres_test --tail 5
          echo ""
          echo "AI Service logs:"
          docker logs pulseiq_ai_service_test --tail 10
          echo ""
          echo "User Service logs:"
          docker logs pulseiq_user_appointment_test --tail 10

          # Simple health check - just verify containers are running
          if docker ps --filter "name=pulseiq_postgres_test" --filter "status=running" | grep -q pulseiq_postgres_test; then
            echo "✅ Database container is running"
          else
            echo "❌ Database container failed"
            exit 1
          fi

          if docker ps --filter "name=pulseiq_ai_service_test" --filter "status=running" | grep -q pulseiq_ai_service_test; then
            echo "✅ AI Service container is running"
          else
            echo "❌ AI Service container failed"
            exit 1
          fi

          if docker ps --filter "name=pulseiq_user_appointment_test" --filter "status=running" | grep -q pulseiq_user_appointment_test; then
            echo "✅ User Service container is running"
          else
            echo "❌ User Service container failed"
            exit 1
          fi

          # Optional: Try quick health checks (but don't fail if they're not ready)
          echo "=== Optional Health Checks ==="
          curl -f http://localhost:8000/health --max-time 5 && echo "✅ AI Service health check passed" || echo "⚠️ AI Service not ready yet (normal)"
          curl -f http://localhost:8085/actuator/health --max-time 5 && echo "✅ User Service health check passed" || echo "⚠️ User Service not ready yet (normal)"

          echo "✅ Simple integration test completed!"

          # Clean up
          echo "=== Cleaning Up ==="
          docker-compose -f docker-compose.test.yml down -v
