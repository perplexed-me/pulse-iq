name: CI Build & Test All Services

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: "20"
  JAVA_VERSION: "21"
  PYTHON_VERSION: "3.11"

jobs:
  # Build and test all services using Docker (no redundant builds)
  docker-build-test:
    runs-on: ubuntu-latest

    # Add PostgreSQL service for integration testing
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: pulseiq_db_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21 (for Java services)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}

      - name: Build all Docker images (includes testing)
        env:
          # Use GitHub secrets for secure environment variables
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          VITE_FIREBASE_API_KEY: ${{ secrets.VITE_FIREBASE_API_KEY }}
          VITE_FIREBASE_AUTH_DOMAIN: ${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}
          VITE_FIREBASE_PROJECT_ID: ${{ secrets.VITE_FIREBASE_PROJECT_ID }}
          VITE_FIREBASE_STORAGE_BUCKET: ${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}
          VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}
          VITE_FIREBASE_APP_ID: ${{ secrets.VITE_FIREBASE_APP_ID }}
          VITE_FIREBASE_MEASUREMENT_ID: ${{ secrets.VITE_FIREBASE_MEASUREMENT_ID }}
        run: |
          # Build user-appointment-service (tests are run during Docker build)
          docker build -t pulseiq-user-appointment:latest ./user-appointment-service
          
          # Build payment-service (tests are run during Docker build)
          docker build -t pulseiq-payment-service:latest ./payment-service
          
          # Build AI service
          docker build -t pulseiq-ai-service:latest ./ai-service
          
          # Build frontend with proper environment variables
          cd frontend
          docker build -t pulseiq-frontend:latest \
            --build-arg VITE_USER_APPOINTMENT_API_URL=http://localhost:8085 \
            --build-arg VITE_PAYMENT_API_URL=http://localhost:8082 \
            --build-arg VITE_AI_SERVICE_API_URL=http://localhost:8000 \
            --build-arg VITE_FIREBASE_API_KEY="$VITE_FIREBASE_API_KEY" \
            --build-arg VITE_FIREBASE_AUTH_DOMAIN="$VITE_FIREBASE_AUTH_DOMAIN" \
            --build-arg VITE_FIREBASE_PROJECT_ID="$VITE_FIREBASE_PROJECT_ID" \
            --build-arg VITE_FIREBASE_STORAGE_BUCKET="$VITE_FIREBASE_STORAGE_BUCKET" \
            --build-arg VITE_FIREBASE_MESSAGING_SENDER_ID="$VITE_FIREBASE_MESSAGING_SENDER_ID" \
            --build-arg VITE_FIREBASE_APP_ID="$VITE_FIREBASE_APP_ID" \
            --build-arg VITE_FIREBASE_MEASUREMENT_ID="$VITE_FIREBASE_MEASUREMENT_ID" \
            .
          cd ..

      - name: Run integration tests
        env:
          # Use GitHub secrets for testing environment
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          # Start services with proper environment variables
          docker-compose up -d
          
          # Wait for services to be healthy
          for i in {1..30}; do
            if docker exec pulseiq_postgres pg_isready -U pulseiq_user; then
              echo "PostgreSQL is ready!"
              break
            fi
            echo "Waiting for PostgreSQLâ€¦ ($i/30)"
            sleep 2
          done
          
          # Test all service endpoints
          echo "Testing AI Service health endpoint..."
          curl --retry 5 --retry-delay 2 http://localhost:8000/health
          
          echo "Testing User Appointment Service health endpoint..."
          curl --retry 5 --retry-delay 2 http://localhost:8085/actuator/health
          
          echo "Testing Payment Service health endpoint..."
          curl --retry 5 --retry-delay 2 http://localhost:8082/actuator/health || echo "Payment service may not have health endpoint"
          
          echo "Testing Frontend..."
          curl --retry 5 --retry-delay 2 http://localhost:8080/ || echo "Frontend may take longer to start"
          
          # Clean up
          docker-compose down -v
