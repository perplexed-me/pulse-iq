name: Build and Deploy PulseIQ

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: docker.io

jobs:
  setup-environment:
    runs-on: ubuntu-latest
    outputs:
      public-ip: ${{ steps.set-vars.outputs.public-ip }}
      docker-username: ${{ steps.set-vars.outputs.docker-username }}
    steps:
      - name: Set environment variables
        id: set-vars
        run: |
          echo "public-ip=${{ secrets.PUBLIC_IP }}" >> $GITHUB_OUTPUT
          echo "docker-username=${{ secrets.DOCKER_USERNAME }}" >> $GITHUB_OUTPUT

  build-and-push:
    runs-on: ubuntu-latest
    needs: setup-environment
    strategy:
      matrix:
        service: [frontend, ai-service, user-appointment-service]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/pulseiq-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Create Firebase service account file
        if: matrix.service == 'user-appointment-service'
        run: |
          echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT_JSON }}' > ./user-appointment-service/src/main/resources/firebase-service-account.json

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            PUBLIC_IP=${{ needs.setup-environment.outputs.public-ip }}

  deploy:
    runs-on: ubuntu-latest
    needs: [setup-environment, build-and-push]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create deployment environment file
        run: |
          cat > .env << EOF
          # Deployment Configuration
          PUBLIC_IP=${{ secrets.PUBLIC_IP }}
          DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}

          # Database Configuration
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}

          # Security
          JWT_SECRET=${{ secrets.JWT_SECRET }}

          # AI Service
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}

          # Firebase Configuration
          VITE_FIREBASE_API_KEY=${{ secrets.VITE_FIREBASE_API_KEY }}
          VITE_FIREBASE_AUTH_DOMAIN=${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}
          VITE_FIREBASE_PROJECT_ID=${{ secrets.VITE_FIREBASE_PROJECT_ID }}
          VITE_FIREBASE_STORAGE_BUCKET=${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}
          VITE_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}
          VITE_FIREBASE_APP_ID=${{ secrets.VITE_FIREBASE_APP_ID }}
          VITE_FIREBASE_MEASUREMENT_ID=${{ secrets.VITE_FIREBASE_MEASUREMENT_ID }}

          # Auto-generated URLs
          FRONTEND_URL=http://${{ secrets.PUBLIC_IP }}:8080
          USER_APPOINTMENT_API_URL=http://${{ secrets.PUBLIC_IP }}:8085
          AI_SERVICE_API_URL=http://${{ secrets.PUBLIC_IP }}:8000
          EOF

      - name: Create Firebase service account file
        run: |
          echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT_JSON }}' > ./firebase-service-account.json

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PUBLIC_IP }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          script_stop: true
          script: |
            # Navigate to project directory
            cd /opt/pulseiq || { echo "Project directory not found"; exit 1; }

            # Backup current deployment
            docker-compose down

            # Pull latest code
            git pull origin main

            # Login to Docker Hub
            echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login --username "${{ secrets.DOCKER_USERNAME }}" --password-stdin

            # Pull latest images
            docker-compose pull

            # Start services
            docker-compose up -d

            # Wait for services to be healthy
            echo "Waiting for services to start..."
            sleep 30

            # Health check
            docker-compose ps

            # Test endpoints
            curl -f http://localhost:8085/actuator/health || echo "Backend health check failed"
            curl -f http://localhost:8000/health || echo "AI service health check failed"
            curl -f http://localhost:8080 || echo "Frontend health check failed"

      - name: Cleanup
        if: always()
        run: |
          rm -f .env
          rm -f ./firebase-service-account.json

  notify:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "✅ Deployment successful to http://${{ secrets.PUBLIC_IP }}:8080"
          else
            echo "❌ Deployment failed"
            exit 1
          fi
